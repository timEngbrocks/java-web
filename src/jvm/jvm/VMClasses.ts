import { BootstrapClassLoader } from '../interpreter/class/BootstrapClassLoader'

export class VMClasses {
	private static readonly vmClasses = [
		'java/lang/Object',
		'java/lang/Class',
		'java/lang/Cloneable',
		'java/lang/ClassLoader',
		'java/io/Serializable',
		'java/lang/Throwable',
		'java/lang/Error',
		'java/lang/Exception',
		'java/lang/RuntimeException',
		'java/lang/SecurityManager',
		'java/security/ProtectionDomain',
		'java/security/AccessControlContext',
		'java/security/AccessController',
		'java/security/SecureClassLoader',
		'java/lang/ClassNotFoundException',
		'java/lang/Record',
		'java/lang/NoClassDefFoundError',
		'java/lang/LinkageError',
		'java/lang/ClassCastException',
		'java/lang/ArrayStoreException',
		'java/lang/VirtualMachineError',
		'java/lang/InternalError',
		'java/lang/OutOfMemoryError',
		'java/lang/StackOverflowError',
		'java/lang/IllegalMonitorStateException',
		'java/lang/ref/Reference',
		'java/lang/ref/SoftReference',
		'java/lang/ref/WeakReference',
		'java/lang/ref/FinalReference',
		'java/lang/ref/PhantomReference',
		'java/lang/ref/Finalizer',
		'java/lang/Thread',
		'java/lang/Thread$FieldHolder',
		'java/lang/Thread$Constants',
		'java/lang/ThreadGroup',
		'java/lang/BaseVirtualThread',
		'java/lang/VirtualThread',
		'java/util/Properties',
		'java/lang/Module',
		'java/lang/reflect/AccessibleObject',
		'java/lang/reflect/Field',
		'java/lang/reflect/Parameter',
		'java/lang/reflect/Method',
		'java/lang/reflect/Constructor',
		'java/lang/Runnable',
		'jdk/internal/vm/ContinuationScope',
		'jdk/internal/vm/Continuation',
		'jdk/internal/vm/StackChunk',
		'jdk/internal/reflect/MagicAccessorImpl',
		'jdk/internal/reflect/MethodAccessorImpl',
		'jdk/internal/reflect/ConstructorAccessorImpl',
		'jdk/internal/reflect/DelegatingClassLoader',
		'jdk/internal/reflect/ConstantPool',
		'jdk/internal/reflect/UnsafeStaticFieldAccessorImpl',
		'jdk/internal/reflect/CallerSensitive',
		'jdk/internal/reflect/NativeConstructorAccessorImpl',
		'java/lang/invoke/DirectMethodHandle',
		'java/lang/invoke/MethodHandle',
		'java/lang/invoke/VarHandle',
		'java/lang/invoke/MemberName',
		'java/lang/invoke/ResolvedMethodName',
		'java/lang/invoke/MethodHandleNatives',
		'java/lang/invoke/LambdaForm',
		'java/lang/invoke/MethodType',
		'java/lang/BootstrapMethodError',
		'java/lang/invoke/CallSite',
		'jdk/internal/foreign/abi/NativeEntryPoint',
		'jdk/internal/foreign/abi/ABIDescriptor',
		'jdk/internal/foreign/abi/VMStorage',
		'jdk/internal/foreign/abi/UpcallLinker$CallRegs',
		'java/lang/invoke/MethodHandleNatives$CallSiteContext',
		'java/lang/invoke/ConstantCallSite',
		'java/lang/invoke/MutableCallSite',
		'java/lang/invoke/VolatileCallSite',
		'java/lang/AssertionStatusDirectives',
		'java/lang/StringBuffer',
		'java/lang/StringBuilder',
		'jdk/internal/misc/UnsafeConstants',
		'jdk/internal/misc/Unsafe',
		'jdk/internal/module/Modules',
		'java/io/ByteArrayInputStream',
		'java/net/URL',
		'java/net/URLClassLoader',
		'java/lang/Enum',
		'java/util/jar/Manifest',
		'jdk/internal/loader/BuiltinClassLoader',
		'jdk/internal/loader/ClassLoaders',
		'jdk/internal/loader/ClassLoaders$AppClassLoader',
		'jdk/internal/loader/ClassLoaders$PlatformClassLoader',
		'java/security/CodeSource',
		'java/util/concurrent/ConcurrentHashMap',
		'java/util/ArrayList',
		'java/lang/StackTraceElement',
		'java/nio/Buffer',
		'java/lang/StackWalker',
		'java/lang/StackStreamFactory$AbstractStackWalker',
		'java/lang/StackFrameInfo',
		'java/lang/LiveStackFrameInfo',
		'java/util/concurrent/locks/AbstractOwnableSynchronizer',
		'java/lang/Boolean',
		'java/lang/Character',
		'java/lang/Float',
		'java/lang/Double',
		'java/lang/Byte',
		'java/lang/Short',
		'java/lang/Integer',
		'java/lang/Long',
		'java/util/Iterator',
		'java/lang/reflect/RecordComponent',
		'jdk/internal/vm/vector/VectorSupport',
		'jdk/internal/vm/vector/VectorSupport$VectorPayload',
		'jdk/internal/vm/vector/VectorSupport$Vector',
		'jdk/internal/vm/vector/VectorSupport$VectorMask',
		'jdk/internal/vm/vector/VectorSupport$VectorShuffle',
		'jdk/internal/vm/FillerObject'
	]

	public static resolveAll(): void {
		VMClasses.vmClasses.forEach(vmClass => {
			this.resolve(vmClass)
		})
	}

	private static resolve(name: string): void {
		const boootstrapLoader = new BootstrapClassLoader()
		const vmClass = boootstrapLoader.loadClassOrInterface(name + '.class')
		vmClass.initializeIfUninitialized()
	}
}
